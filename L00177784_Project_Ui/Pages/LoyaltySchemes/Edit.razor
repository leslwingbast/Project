@page "/loyaltyschemes/edit/{schemeId:int}"

@using Data
@using System.Text
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using BootstrapBlazor.Components
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navManager
@inject IJSRuntime js
@inject IConfiguration config

<h3>Edit Loyalty Scheme</h3>


@if (editLoyaltyScheme == null)
{
<p>loading ....</p>
}
else

{
    <div class="align-content-center"> 
        <EditForm Model="@editLoyaltyScheme" OnValidSubmit="@EditLoyaltyScheme">
            <div class="container alert-secondary p-4 col-6 mx-auto" style="min-width: 300px;">
                <div class="row-1 my-1">
                    <div class="form-group col">
                        <label for="name">Customer Number:</label>
                        <input type="text" class="form-control" @bind="@editLoyaltyScheme.customerId" disabled>                    
                    </div>
                </div>
                @if (editLoyaltyScheme.loyaltyGroup != null)
                {
                    <div class="row-1 my-1">
                        <div class="form-group col">
                            <label for="name">Loyalty Scheme:</label>
                            <input type="text" class="form-control" @bind="@editLoyaltyScheme.loyaltyGroup.name" disabled>
                        </div>
                    </div>
                }
                <div class="row my-1">
                
                    <div class="form-group col-4">
                        <label for="name">Remaining Items:</label>
                        <input type="number" class="form-control" value="@editLoyaltyScheme.remainingItems" @onchange="UpdateStars">
                    </div>
                
                    <div class="form-group col-8">
                        <label for="name">Loyalty Scheme:</label>
                        <Rate Value="@stars" ValueChanged="@OnValueChanged" Max="@max"/>
                    </div>
                </div>
            
            <div class="row my-1">
                <button type="submit" class="btn col-sm mt-4 mx-1 btn-success">Save Changes</button>
                <div type="submit" class="btn btn-warning col-sm mt-4 mx-1" @onclick="Cancel">Cancel</div>
                <div type="submit" class="btn btn-danger col-sm mt-4 mx-1" @onclick="DeleteLoyaltyScheme">Delete</div>
            </div>
            </div>
        </EditForm>

    </div>
}


@code {
    /// <summary>
    /// Id of scheme to be edited
    /// </summary>
    [Parameter]
    public int schemeId { get; set; }

    /// <summary>
    /// Loyalty scheme that will hold edit information
    /// </summary>
    private LoyaltyScheme editLoyaltyScheme = new LoyaltyScheme();

    /// <summary>
    /// Loyalty Group for scheme to show image and threshold
    /// </summary>
    private LoyaltyGroup connectedLoytaltyGroup = new LoyaltyGroup();

    /// <summary>
    /// Endpoint for loyalty scheme
    /// </summary>
    private string schemeEndpoint { get; set; } = string.Empty;

    /// <summary>
    /// Endpoint for Loyalty Group
    /// </summary>
    private string groupEndpoint { get; set; } = string.Empty;

    /// <summary>
    /// Store stars to allow user friendly way of changing items purchased
    /// </summary>
    private double stars { get; set; }

    /// <summary>
    /// Stores the max number of stars that can be selected
    /// </summary>
    private int max { get; set; }


    /// <summary>
    /// Sets the endpoint for the loyalty scheme and calls GetSheme method
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        schemeEndpoint = string.Concat(config.GetValue<string>("BaseApiUrl")!, "/loyaltyschemes/", schemeId.ToString());
        await GetScheme(schemeId);

    }

    /// <summary>
    /// Loads the loyalty scheme to be edited
    /// </summary>
    /// <param name="schemeId"></param>
    /// <returns></returns>
    private async Task GetScheme(int schemeId)
    {
        var client = ClientFactory.CreateClient();

        var request = new HttpRequestMessage(
                        HttpMethod.Get,
                        schemeEndpoint

                    );

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadAsStringAsync();

            editLoyaltyScheme = JsonConvert.DeserializeObject<LoyaltyScheme>(responseData)!;

            // Sets the endpoint for the loyalty group relating to scheme
            groupEndpoint = string.Concat(config.GetValue<string>("BaseApiUrl")!, "/loyaltygroups/", editLoyaltyScheme.loyaltyGroup_Id.ToString());

            // Call mehtod to update the loyalty connected group
            await UpdateConnectedLoyaltyGroup(groupEndpoint);

            // Set the current items purchased
            stars = (double)editLoyaltyScheme.loyaltyGroup!.threshold! - editLoyaltyScheme.remainingItems;

            // Set the max stars that can be selected
            max = (int)editLoyaltyScheme.loyaltyGroup.threshold;
        }
        else
        {
            await js.InvokeVoidAsync("alert", "There was a problem retrieving this product");
        }
    }

    /// <summary>
    /// Gets and updates the connected loyalty group
    /// </summary>
    /// <param name="endpoint"></param>
    /// <returns></returns>
    private async Task UpdateConnectedLoyaltyGroup(string endpoint)
    {
        var groupClient = ClientFactory.CreateClient();
        var groupRequest = new HttpRequestMessage(
                        HttpMethod.Get,
                        endpoint

                    );
        var groupResponse = await groupClient.SendAsync(groupRequest);

        if (groupResponse.IsSuccessStatusCode)
        {
            var groupResponseData = await groupResponse.Content.ReadAsStringAsync();

            connectedLoytaltyGroup = JsonConvert.DeserializeObject<LoyaltyGroup>(groupResponseData)!;
            editLoyaltyScheme.loyaltyGroup = connectedLoytaltyGroup;
        }
        else
        {
            await js.InvokeVoidAsync("alert", "There was a problem retrieving this product");
        }
    }

    /// <summary>
    /// Call to update the scheme
    /// </summary>
    /// <returns></returns>
    private async Task EditLoyaltyScheme()
    {
        var request = new HttpRequestMessage(
            HttpMethod.Put,
            schemeEndpoint
        );

        var client = ClientFactory.CreateClient();

        // Convert new product to json
        string stringjson = JsonConvert.SerializeObject(editLoyaltyScheme);
        // Add content including new product to request
        request.Content = new StringContent(stringjson, Encoding.UTF8, "application/json");

        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();
        navManager.NavigateTo("/loyaltyschemes");
    }

    /// <summary>
    /// Updates the loyalty scheme with a change in the stars
    /// </summary>
    /// <param name="val"></param>
    private void OnValueChanged(double val)
    {
        stars = val;
        editLoyaltyScheme.remainingItems = (int)editLoyaltyScheme.loyaltyGroup!.threshold! - (int)stars;
    }

    /// <summary>
    /// Updates the loyalty scheme with the change in remaining items
    /// </summary>
    /// <param name="e"></param>
    private void UpdateStars(ChangeEventArgs e)
    {
        editLoyaltyScheme.remainingItems = int.Parse(e.Value!.ToString()!);
        stars = (double)editLoyaltyScheme.loyaltyGroup!.threshold! - editLoyaltyScheme.remainingItems;
    }


    /// <summary>
    /// Returns user to loyalty schemes page
    /// </summary>
    private void Cancel()
    {
        navManager.NavigateTo("/loyaltyschemes");
    }

    /// <summary>
    /// Deleted the loyalty scheme
    /// </summary>
    /// <returns></returns>
    private async Task DeleteLoyaltyScheme()
    {

        // Confirmation required to delete the loyalty scheme
        bool confirmed = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the loyalty scheme for {editLoyaltyScheme.customerId}?");
        
        // If confirmed the call to delte will happen
        if (confirmed)
        {
            var groupClient = ClientFactory.CreateClient();
            var groupRequest = new HttpRequestMessage(
                            HttpMethod.Delete,
                            schemeEndpoint

                        );
            var groupResponse = await groupClient.SendAsync(groupRequest);

            if (groupResponse.IsSuccessStatusCode)
            {
                navManager.NavigateTo("/loyaltyschemes");
            }
        }
        // If canceled the scheme will not be deleted and user will be retured to loyalty schemes page
        else
        {
            navManager.NavigateTo("/loyaltyschemes");
        }
    }

}
