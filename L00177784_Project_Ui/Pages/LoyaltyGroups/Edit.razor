@page "/loyaltygroups/edit/{loyaltyId:int}"

@using Data
@using System.Text
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using BootstrapBlazor.Components
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navManager
@inject IConfiguration config
@inject IJSRuntime js
@inject IWebHostEnvironment env

<h3>LoyaltyGroupEdit</h3>
<div class="align-content-center">   
    <EditForm Model="@editLoyaltyGroup" OnValidSubmit="@EditLoyaltyGroup">
    <DataAnnotationsValidator />
    <div class="container alert-secondary p-4 col-6 mx-auto" style="min-width: 300px;">
        <form>
            <div class="row-1 my-1">
                <div class="form-group col">
                    <label for="name">Loyalty Group Name:</label>
                    <input type="text" class="form-control" id="inputProductName" @bind="@editLoyaltyGroup!.name" placeholder="Loyalty Group Name">
                    <ValidationMessage For="@(()=> editLoyaltyGroup.name)" />
                </div>
            </div>
            <div class="row-1 my-2">
                <div class="form-group col">
                    <label for="threshold">Number of items to be purchased to receive free item</label>
                    <div class="col-4" style="width: 150px;">                  
                         <input type="number" class="form-control" @bind-value="@editLoyaltyGroup.threshold"/>
                    </div>
                </div>
            </div>
            <div class="form-group col">
                <div class="row-1 my-1">
                    <label for="image">Image:</label>
                    <div class="row-1 ">
                        <div class="form-group">
                            <InputFile OnChange="ReplaceImage" class="btn btn-light col-12" accept="image/png, image/jpeg, image/gif" id="inputFile">
                                <label for="inputFile">Replace Image</label>
                            </InputFile>
                        </div>
                    </div>
                    <div class="row my-1">
                        <div class="col" style="min-width:30%">
                            <div class="row" style="font-size:smaller">
                                <label style="font-size:smaller">Suggested Image Dimensions:</label>
                                <label style="font-size:smaller">200px x 100px</label>
                                <label style="font-size:smaller">Max file size: 500kb</label>
                            </div>
                        </div>
                            <div class="col">                       
                                <ImageViewer Url=@string.Concat("/images/",image)
                                             FitMode="ObjectFitMode.Fill" style="max-width: 200px;" />                       
                        </div>
                    </div>

                </div>

            </div>
            <div class="row-1 my-1">
                <div class="form-group col">
                    <label for="products">Products:</label>
                    <MultiSelect Items="@items" Color="Color.Dark" @bind-Value="@SelectedValues" style="font-size:small;" />
                </div>
            </div>
            
        </form>
        <div class="row my-1">
            <button type="submit" class="btn col-sm mt-4 mx-1 btn-success">Submit</button>
            <div type="submit" class="btn btn-warning col-sm mt-4 mx-1" @onclick="Cancel">Cancel</div>
            <div type="submit" class="btn btn-danger col-sm mt-4 mx-1" @onclick="DeleteLoyaltyGroup">Delete</div>
        </div>
    </div>
</EditForm>




</div>

@code {
    /// <summary>
    /// Loyalty Id as parameter of loyalty group to be updated
    /// </summary>
    [Parameter]
    public int loyaltyId { get; set; }

    private string image = "placeholder.png";

    private long maxImageSize = 1024 * 512;

    /// <summary>
    /// Loyalty group to be edited
    /// </summary>
    private LoyaltyGroup editLoyaltyGroup = new LoyaltyGroup();

    /// <summary>
    /// List of SelectedItem type to populate options in multiselect
    /// </summary>
    public List<SelectedItem> items { get; set; } = new List<SelectedItem>();

    /// <summary>
    /// List of SelectedItem type to work with BlazorBootstrap multiselect
    /// </summary>
    public List<SelectedItem> dataSource { get; set; } = new List<SelectedItem>();

    /// <summary>
    /// Lost of current products that are connected to the current loyalty scheme
    /// </summary>
    public List<String> currentProducts { get; set; } = new List<string>();

    /// <summary>
    /// List of products used to populate options
    /// </summary>
    private List<Product> products = new List<Product>();

    /// <summary>
    /// Selected values in the multiselect
    /// </summary>
    private IEnumerable<string> SelectedValues { get; set; } = Enumerable.Empty<string>();

    /// <summary>
    /// Initialisation of page which will call methods to update loyalty group and products
    /// </summary>
    /// <returns>Done</returns>
    protected override async Task OnInitializedAsync()
    {
        await GetLoyaltyGroup(loyaltyId);
        await ProductAPICall();
        SelectedValues = currentProducts.ToList();
    }

    /// <summary>
    /// Gets the current loyalty scheme
    /// </summary>
    /// <param name="loyaltyId">Id of loyalty scheme</param>
    /// <returns>Done</returns>
    private async Task GetLoyaltyGroup(int loyaltyId)
    {
        string endpoint = "https://localhost:7240/api/LoyaltyGroups/" + loyaltyId;

        var client = ClientFactory.CreateClient();

        var request = new HttpRequestMessage(
                        HttpMethod.Get,
                        endpoint

                    );
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadAsStringAsync();

            editLoyaltyGroup = JsonConvert.DeserializeObject<LoyaltyGroup>(responseData)!;
            @if(!string.IsNullOrEmpty(editLoyaltyGroup.image))
            {
                image = editLoyaltyGroup.image;
            }
        }
        else
        {
            await js.InvokeVoidAsync("alert", "There was a problem retrieving this loyalty scheme");
        }

    }

    /// <summary>
    /// Endpoint to get products
    /// </summary>
    private readonly string allProductsEndpoint = "https://localhost:7240/api/Products";

    /// <summary>
    /// Initial API call to load all products for multiselect
    /// Populates a list of products that are currently matching the loyalty shceme
    /// </summary>
    /// <param name="endpoint">Endpoint to be called by the API</param>
    /// <returns></returns>
    private async Task ProductAPICall()
    {
        var request = new HttpRequestMessage(
                        HttpMethod.Get,
                        allProductsEndpoint
                    );

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadAsStringAsync();
            products = JsonConvert.DeserializeObject<List<Product>>(responseData)!;
            foreach (var product in products!)
            {
                dataSource.Add(new SelectedItem
                    {
                        Value = product.id.ToString(),
                        Text = product.name
                    });

                if (product.loyaltyGroup_Id == editLoyaltyGroup.id)
                {
                    currentProducts.Add(product.id.ToString());
                }
            }
            items = GenerateDataSource(dataSource);

        }
        else
        {
            await js.InvokeVoidAsync("alert", "There was a prolem retrieving the products");
        }
        StateHasChanged();
    }

    /// <summary>
    /// Populates the list of products in the multiselect
    /// </summary>
    /// <param name="source">List of products id and name</param>
    /// <returns>List of selecteditem type</returns>
    private static List<SelectedItem> GenerateDataSource(List<SelectedItem> source) => source.Select(i => new SelectedItem(i.Value, i.Text)).ToList();


    /// <summary>
    /// Updates loyalty group with form details
    /// </summary>
    /// <returns>Done</returns>
    private async Task EditLoyaltyGroup()
    {
        // Checks and updates product's loyalty scheme id if any have been changed through loyalty group form
        foreach(Product updateProduct in products)
        {
            if(SelectedValues.Contains(updateProduct.id.ToString()))
            {
                if(updateProduct.loyaltyGroup_Id != editLoyaltyGroup.id)
                {
                    updateProduct.loyaltyGroup_Id = (int)editLoyaltyGroup.id!;
                    await UpdateProduct(updateProduct);
                }

            }
            else if(updateProduct.loyaltyGroup_Id == editLoyaltyGroup.id)
            {
                updateProduct.loyaltyGroup_Id = null;
                await UpdateProduct(updateProduct);
            }     
        }

        // Checks to ensure required fields are inputed
        if (string.IsNullOrEmpty(editLoyaltyGroup.name))
        {
            await js.InvokeVoidAsync("alert", "Group name required");
        }
        else if (editLoyaltyGroup.threshold == 0)
        {
            await js.InvokeVoidAsync("alert", "Thresold for free product cannot be 0");
        }
        else
        {
            editLoyaltyGroup.image = image;

            string endpoint = "https://localhost:7240/api/LoyaltyGroups/" + loyaltyId;
            var request = new HttpRequestMessage(
                HttpMethod.Put,
                endpoint
            );

            var client = ClientFactory.CreateClient();

            // Convert new product to json
            string stringjson = JsonConvert.SerializeObject(editLoyaltyGroup);
            // Add content including new product to request
            request.Content = new StringContent(stringjson, Encoding.UTF8, "application/json");
            // Try to post the new product
            try
            {
                var response = await client.SendAsync(request);
                response.EnsureSuccessStatusCode();
            }
            catch (Exception ex)
            {
                await js.InvokeVoidAsync("alert", ex);
            }
            // Return to products page
            navManager.NavigateTo("/loyaltygroups");
        }

    }

    /// <summary>
    /// Update any products that are in not currently stored as part of the loyalty group
    /// </summary>
    /// <param name="productToUpdate">Product that needs to be updated</param>
    /// <returns>Done</returns>
    private async Task UpdateProduct(Product productToUpdate)
    {
        string endpoint = "https://localhost:7240/api/Products/" + productToUpdate.id;
        var request = new HttpRequestMessage(
            HttpMethod.Put,
            endpoint
        );

        var client = ClientFactory.CreateClient();

        // Convert new product to json
        string stringjson = JsonConvert.SerializeObject(productToUpdate);
        // Add content including new product to request
        request.Content = new StringContent(stringjson, Encoding.UTF8, "application/json");

        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();

    }

    /// <summary>
    /// Uploads image to images folder and updates image with new image filename
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task ReplaceImage(InputFileChangeEventArgs e)
    {
        string fileNewName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(e.File.Name));


        string path = $"{env.WebRootPath}\\images\\{fileNewName}";
        await using FileStream fs = new(path, FileMode.Create);
        await e.File.OpenReadStream(maxImageSize).CopyToAsync(fs);
        image = fileNewName;
    }

    /// <summary>
    /// API call to deleted current loyalty group
    /// </summary>
    /// <returns>Done</returns>
    private async Task DeleteLoyaltyGroup()
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {editLoyaltyGroup.name}?");
        if (confirmed)
        {
            string endpoint = "https://localhost:7240/api/LoyaltyGroups/" + loyaltyId;
            var request = new HttpRequestMessage(
                HttpMethod.Delete,
                endpoint
            );
            var client = ClientFactory.CreateClient();

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            await js.InvokeVoidAsync("alert", "Loyalty Group has been deleted");
            navManager.NavigateTo("/loyaltyGroups");
        }
    }


    /// <summary>
    /// Returns user to loyalty groups page
    /// </summary>
    private void Cancel()
    {
        if (string.IsNullOrEmpty(editLoyaltyGroup.image))
        {
            if (image != "placeholder.png")
            {
                string path = $"{env.WebRootPath}\\{image}";
                File.Delete(path);
            }
        }
        navManager.NavigateTo("/loyaltygroups");
    }
}
