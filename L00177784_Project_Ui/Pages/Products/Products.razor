@page "/products"

@using Data
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navManager


<PageTitle>Products</PageTitle>

<h1>Products</h1>
<a class="btn btn-success" href="/products/create"><i class="oi oi-plus"></i> Create New Product</a>

<div class="row">
    <input type="text" placeholder="Search by Product ID, Name, Barcode or Sku" minlength="3"
           @bind="filterProduct"
           @bind:event="oninput" 
    />
</div>
@if (allProducts == null || filteredProducts == null)
{
    <p>Loading ....</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td>ID</td>
                <td>Sku</td>
                <td>Name</td>
                <td>Barcode</td>
                <td>Group</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var currentProduct in filteredProducts)
            {
                if (!IsVisible(currentProduct))
                    continue;
                <tr @onclick="() => Select(currentProduct)">
                    <td>@currentProduct.id</td>
                    <td>@currentProduct.sku</td>
                    <td>@currentProduct.name</td>
                    <td>@currentProduct.barcode</td>
                    @if (currentProduct.productLoyaltyGroup != null)
                    {
                        <td>@currentProduct.productLoyaltyGroup.name</td>
                    }
                    else
                    {
                        <td>@currentProduct.loyaltyGroup_Id</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}


@code {
    /// <summary>
    /// Lists for full list of products and filtered products
    /// </summary>
    private List<Product>? allProducts, filteredProducts = new List<Product>();
    private List<LoyaltyGroup>? allLoyaltyGroups = new List<LoyaltyGroup>();

    /// <summary>
    /// String to hold text when searching for a product
    /// </summary>
    string filterProduct = string.Empty;

    /// <summary>
    /// Endpoint for all getting products
    /// </summary>
    private readonly string allProductsEndpoint = "https://localhost:7240/api/Products";

    private string allLoyaltyGroupsEndpoint = "https://localhost:7240/api/LoyaltyGroups";

    /// <summary>
    /// Initialisation of the page
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await LoyaltyAPICall();
        await ProductAPICall();

    }



    /// <summary>
    /// Initial API call to load all products
    /// </summary>
    /// <param name="endpoint">Endpoint to be called by the API</param>
    /// <returns></returns>
    private async Task ProductAPICall()
    {
        var request = new HttpRequestMessage(
                        HttpMethod.Get,
                        allProductsEndpoint
                    );

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var stream = await response.Content.ReadAsStreamAsync();
            allProducts = await JsonSerializer.DeserializeAsync<List<Product>>(stream);
            if(allProducts != null)
            {
                filteredProducts = allProducts;
                foreach(var eachProduct in filteredProducts)
                {
                    if (allLoyaltyGroups != null)
                    {
                        eachProduct.productLoyaltyGroup = allLoyaltyGroups.SingleOrDefault(x => x.id == eachProduct.loyaltyGroup_Id);
                    }
                }
            }


        }
        else
        {
            // TODO: Handle error - display message
            Console.WriteLine("Something went wrong - Please try again later...");
        }
        StateHasChanged();
    }


    private async Task LoyaltyAPICall()
    {
        var request = new HttpRequestMessage(
                        HttpMethod.Get,
                        allLoyaltyGroupsEndpoint
                    );

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var stream = await response.Content.ReadAsStreamAsync();
            allLoyaltyGroups = await JsonSerializer.DeserializeAsync<List<LoyaltyGroup>>(stream);
        }
        else
        {
            // TODO: Handle error - display message
            Console.WriteLine("Something went wrong - Please try again later...");
        }
        StateHasChanged();
    }

    /// <summary>
    /// Method for searching products based on multiple values
    /// </summary>
    /// <param name="productSearch">Product to be checked</param>
    /// <returns></returns>
    private bool IsVisible(Product productSearch)
    {
        if(string.IsNullOrEmpty(filterProduct))
        {
            return true;
        }

        if (productSearch.name.Contains(filterProduct, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        if(productSearch.barcode != null)
        {
            if (productSearch.barcode.Contains(filterProduct, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if(productSearch.sku != null)
        {
            var skuString = productSearch.sku.ToString();
            if(skuString != null)
            {
                if (skuString.Contains(filterProduct, StringComparison.OrdinalIgnoreCase))
                    return true;
            }
        }
        if (productSearch.id.ToString().Contains(filterProduct, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    private void Select(Product selectedProduct)
    {
        navManager.NavigateTo("/products/edit/" + selectedProduct.id);
    }

}